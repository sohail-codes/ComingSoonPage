{"version":3,"sources":["logo.png","google-play-badge.png","screens/home.js","screens/appref.js","screens/product.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","home","className","src","logo","alt","href","google","Component","appref","props","url","prefix","this","match","params","id","window","location","replace","withRouter","product","URLSearchParams","search","get","App","exact","path","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,+C,+OCItBC,G,6KAEb,OACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,cACX,yBAAKA,UAAW,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,yBAAKH,UAAW,kBAChB,8BACA,wBAAIA,UAAW,YAAf,eAMJ,yBAAKA,UAAW,eACZ,yBAAKA,UAAW,WACZ,uBAAGA,UAAW,WAAd,wBAGA,uBAAGA,UAAW,cAAeI,KAAK,uEAC9B,yBAAMH,IAAKI,IAAQL,UAAW,YAAaG,IAAI,sB,GArBzCG,cCF5BC,E,kDACF,WAAaC,GAAQ,uCACXA,G,qDAGN,IAGMC,EAAOC,8FAFAC,KAAKH,MAAMI,MAAMC,OAAOC,GAIrC,OADAC,OAAOC,SAASC,QAAQR,GACjB,S,GAVMH,aAaNY,cAAWX,GCbpBY,E,kDACF,WAAaX,GAAQ,uCACXA,G,qDAGN,IAKMC,EAAOC,iGAJDC,KAAKH,MAAMI,MAAMC,OAAOC,GAIK,SAH3B,IAAIM,gBAAgBT,KAAKH,MAAMQ,SAASK,QACnCC,IAAI,OAIvB,OADAP,OAAOC,SAASC,QAAQR,GACjB,S,GAZOH,aAePY,cAAWC,GCPX,SAASI,IACtB,OACE,kBAAC,IAAD,KACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,gBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,EAAD,SCZQC,QACW,cAA7BX,OAAOC,SAASW,UAEe,UAA7BZ,OAAOC,SAASW,UAEhBZ,OAAOC,SAASW,SAASf,MACvB,2DCZNgB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d129ed2a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.00b399c5.png\";","module.exports = __webpack_public_path__ + \"static/media/google-play-badge.db9b21a1.png\";","import React, { Component } from 'react'\r\nimport logo from '../logo.png';\r\nimport google from '../google-play-badge.png';\r\nimport '../App.css';\r\nexport default class home extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"App-header\">\r\n                    <div className={\"logoholder\"}>\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                    <div className={\"headnameholder\"}>\r\n                    <div></div>\r\n                    <h2 className={'headname'}>\r\n                        SHOPSATH\r\n                    </h2>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className={\"contentArea\"}>\r\n                    <div className={\"content\"}>\r\n                        <p className={\"welcome\"}>\r\n                            Welcome To ShopSath!\r\n                        </p>\r\n                        <a className={\"badgeholder\"} href=\"https://play.google.com/store/apps/details?id=com.contexdo.shopsath\">\r\n                            <img  src={google} className={'playbadge'} alt=\"playstore\"/>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport {withRouter} from 'react-router';\r\nclass appref extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        const referrer = \"shareapp\";\r\n        const code = this.props.match.params.id;\r\n        const prefix = \"https://play.google.com/store/apps/details?id=com.contexdo.shopsath&referrer=\";\r\n        const url  = prefix+referrer+\"&code=\"+code;\r\n        window.location.replace(url);\r\n        return null;\r\n    }\r\n}\r\nexport default withRouter(appref);","import React, { Component } from 'react';\r\nimport {withRouter} from 'react-router';\r\nclass product extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        const referrer = \"shareproduct\";\r\n        const sku = this.props.match.params.id;\r\n        const query = new URLSearchParams(this.props.location.search);\r\n        const code = query.get('ref');\r\n        const prefix = \"https://play.google.com/store/apps/details?id=com.contexdo.shopsath&referrer=\";\r\n        const url  = prefix+referrer+\"&sku=\"+sku+\"&code=\"+code;\r\n        window.location.replace(url);\r\n        return null\r\n    }\r\n}\r\nexport default withRouter(product);","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Home from './screens/home';\nimport Appref from './screens/appref';\nimport Product from './screens/product';\n\nexport default function App() {\n  return (\n    <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/app/:id\">\n            <Appref />\n          </Route>\n          <Route path=\"/product/:id\">\n            <Product />\n          </Route>\n          <Route>\n            <Home/>\n          </Route>\n        </Switch>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}